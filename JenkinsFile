pipeline {
    agent any

    environment {
        IMAGE_NAME = "bookRental"
        CONTAINER_NAME = "bookRental"
        ROLLBACK_CONTAINER_NAME = "bookRental-old"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "ÏΩîÎìú"
                git branch: 'main', url: 'git@github.com:MeteoRiver/BookRental.git'
            }
        }

         stage('Build & Test') {
            steps {
                sh 'chmod +x ./gradlew'
                sh './gradlew clean build'
            }
        }

        stage('Test') {
            steps {
                sh './gradlew test'
            }
            post {
                failure {
                    error("ÌÖåÏä§Ìä∏ Ïã§Ìå®")
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    env.IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
                    sh "docker build -t ${env.IMAGE_TAG} ."
                }
            }
        }

        stage('Deploy Docker') {
            steps {
                script {
                    env.IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"

                    // Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Î°§Î∞± Ï≤òÎ¶¨
                    sh """
                        if docker ps -a --format '{{.Names}}' | grep -q '${CONTAINER_NAME}'; then
                            echo "Stopping existing container..."
                            docker stop ${CONTAINER_NAME} || true
                            docker rename ${CONTAINER_NAME} ${ROLLBACK_CONTAINER_NAME} || true
                        fi
                    """

                    // ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ (Î°úÏª¨ MySQL ÏÇ¨Ïö©)
                    sh """
                        echo "Deploying new version: ${env.IMAGE_TAG}"
                        docker run -d --name ${CONTAINER_NAME} -p 8080:8080 \
                        -e SPRING_PROFILES_ACTIVE=prod \
                        -e SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/bookRental \
                        -e SPRING_DATASOURCE_USERNAME=root \
                        -e SPRING_DATASOURCE_PASSWORD=1234 \
                        ${env.IMAGE_TAG}
                    """

                    // 30Ï¥à ÎåÄÍ∏∞ ÌõÑ ÌôïÏù∏
                    sleep 30
                    env.STATUS = sh(script: "docker ps -f name=${CONTAINER_NAME} --format '{{.Status}}'", returnStdout: true).trim()

                    // Ïã§Ìå® Ïãú Î°§Î∞±
                    if (!env.STATUS.contains("Up")) {
                        echo "Deployment failed, rolling back..."
                        sh """
                            docker stop ${CONTAINER_NAME} || true
                            docker rename ${ROLLBACK_CONTAINER_NAME} ${CONTAINER_NAME} || true
                            docker start ${CONTAINER_NAME} || true
                        """
                        error("Deployment failed, rolled back to previous version.")
                    } else {
                        echo "Deployment successful. Removing old container..."
                        sh "docker rm ${ROLLBACK_CONTAINER_NAME} || true"
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                echo "üîç Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏàòÌñâ"
                script {
                    def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/actuator/health", returnStdout: true).trim()
                    if (response != '200') {
                        error "üö® Î∞∞Ìè¨ Ïã§Ìå® - ÏÑúÎ≤Ñ ÏùëÎãµ Ïò§Î•ò!"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Î∞∞Ìè¨ ÏôÑÎ£å!"
        }
        failure {
            echo "CI/CD Ïã§Ìå®"
        }
    }
}